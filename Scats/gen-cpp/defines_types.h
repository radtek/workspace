/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef defines_TYPES_H
#define defines_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace scatsService {

class T_Datetime;

typedef struct _T_Datetime__isset {
  _T_Datetime__isset() : iYear(false), byMonth(false), byDay(false), byHour(false), byMinute(false), bySecond(false) {}
  bool iYear :1;
  bool byMonth :1;
  bool byDay :1;
  bool byHour :1;
  bool byMinute :1;
  bool bySecond :1;
} _T_Datetime__isset;

class T_Datetime {
 public:

  T_Datetime(const T_Datetime&);
  T_Datetime& operator=(const T_Datetime&);
  T_Datetime() : iYear(0), byMonth(0), byDay(0), byHour(0), byMinute(0), bySecond(0) {
  }

  virtual ~T_Datetime() throw();
  int16_t iYear;
  int8_t byMonth;
  int8_t byDay;
  int8_t byHour;
  int8_t byMinute;
  int8_t bySecond;

  _T_Datetime__isset __isset;

  void __set_iYear(const int16_t val);

  void __set_byMonth(const int8_t val);

  void __set_byDay(const int8_t val);

  void __set_byHour(const int8_t val);

  void __set_byMinute(const int8_t val);

  void __set_bySecond(const int8_t val);

  bool operator == (const T_Datetime & rhs) const
  {
    if (!(iYear == rhs.iYear))
      return false;
    if (!(byMonth == rhs.byMonth))
      return false;
    if (!(byDay == rhs.byDay))
      return false;
    if (!(byHour == rhs.byHour))
      return false;
    if (!(byMinute == rhs.byMinute))
      return false;
    if (!(bySecond == rhs.bySecond))
      return false;
    return true;
  }
  bool operator != (const T_Datetime &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const T_Datetime & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(T_Datetime &a, T_Datetime &b);

inline std::ostream& operator<<(std::ostream& out, const T_Datetime& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
