/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ScatsService_H
#define ScatsService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "scats_types.h"

namespace scatsService {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ScatsServiceIf {
 public:
  virtual ~ScatsServiceIf() {}
  virtual void QueryLcTime( ::scatsService::T_Datetime& _return) = 0;
};

class ScatsServiceIfFactory {
 public:
  typedef ScatsServiceIf Handler;

  virtual ~ScatsServiceIfFactory() {}

  virtual ScatsServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ScatsServiceIf* /* handler */) = 0;
};

class ScatsServiceIfSingletonFactory : virtual public ScatsServiceIfFactory {
 public:
  ScatsServiceIfSingletonFactory(const boost::shared_ptr<ScatsServiceIf>& iface) : iface_(iface) {}
  virtual ~ScatsServiceIfSingletonFactory() {}

  virtual ScatsServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ScatsServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ScatsServiceIf> iface_;
};

class ScatsServiceNull : virtual public ScatsServiceIf {
 public:
  virtual ~ScatsServiceNull() {}
  void QueryLcTime( ::scatsService::T_Datetime& /* _return */) {
    return;
  }
};


class ScatsService_QueryLcTime_args {
 public:

  ScatsService_QueryLcTime_args(const ScatsService_QueryLcTime_args&);
  ScatsService_QueryLcTime_args& operator=(const ScatsService_QueryLcTime_args&);
  ScatsService_QueryLcTime_args() {
  }

  virtual ~ScatsService_QueryLcTime_args() throw();

  bool operator == (const ScatsService_QueryLcTime_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ScatsService_QueryLcTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ScatsService_QueryLcTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ScatsService_QueryLcTime_pargs {
 public:


  virtual ~ScatsService_QueryLcTime_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ScatsService_QueryLcTime_result__isset {
  _ScatsService_QueryLcTime_result__isset() : success(false) {}
  bool success :1;
} _ScatsService_QueryLcTime_result__isset;

class ScatsService_QueryLcTime_result {
 public:

  ScatsService_QueryLcTime_result(const ScatsService_QueryLcTime_result&);
  ScatsService_QueryLcTime_result& operator=(const ScatsService_QueryLcTime_result&);
  ScatsService_QueryLcTime_result() {
  }

  virtual ~ScatsService_QueryLcTime_result() throw();
   ::scatsService::T_Datetime success;

  _ScatsService_QueryLcTime_result__isset __isset;

  void __set_success(const  ::scatsService::T_Datetime& val);

  bool operator == (const ScatsService_QueryLcTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ScatsService_QueryLcTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ScatsService_QueryLcTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ScatsService_QueryLcTime_presult__isset {
  _ScatsService_QueryLcTime_presult__isset() : success(false) {}
  bool success :1;
} _ScatsService_QueryLcTime_presult__isset;

class ScatsService_QueryLcTime_presult {
 public:


  virtual ~ScatsService_QueryLcTime_presult() throw();
   ::scatsService::T_Datetime* success;

  _ScatsService_QueryLcTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ScatsServiceClient : virtual public ScatsServiceIf {
 public:
  ScatsServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ScatsServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void QueryLcTime( ::scatsService::T_Datetime& _return);
  void send_QueryLcTime();
  void recv_QueryLcTime( ::scatsService::T_Datetime& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ScatsServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ScatsServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ScatsServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_QueryLcTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ScatsServiceProcessor(boost::shared_ptr<ScatsServiceIf> iface) :
    iface_(iface) {
    processMap_["QueryLcTime"] = &ScatsServiceProcessor::process_QueryLcTime;
  }

  virtual ~ScatsServiceProcessor() {}
};

class ScatsServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ScatsServiceProcessorFactory(const ::boost::shared_ptr< ScatsServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ScatsServiceIfFactory > handlerFactory_;
};

class ScatsServiceMultiface : virtual public ScatsServiceIf {
 public:
  ScatsServiceMultiface(std::vector<boost::shared_ptr<ScatsServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ScatsServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ScatsServiceIf> > ifaces_;
  ScatsServiceMultiface() {}
  void add(boost::shared_ptr<ScatsServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void QueryLcTime( ::scatsService::T_Datetime& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QueryLcTime(_return);
    }
    ifaces_[i]->QueryLcTime(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ScatsServiceConcurrentClient : virtual public ScatsServiceIf {
 public:
  ScatsServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ScatsServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void QueryLcTime( ::scatsService::T_Datetime& _return);
  int32_t send_QueryLcTime();
  void recv_QueryLcTime( ::scatsService::T_Datetime& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
